// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/auth/auth.go

// Package auth is a generated GoMock package.
package auth

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthController is a mock of AuthController interface.
type MockAuthController struct {
	ctrl     *gomock.Controller
	recorder *MockAuthControllerMockRecorder
}

// MockAuthControllerMockRecorder is the mock recorder for MockAuthController.
type MockAuthControllerMockRecorder struct {
	mock *MockAuthController
}

// NewMockAuthController creates a new mock instance.
func NewMockAuthController(ctrl *gomock.Controller) *MockAuthController {
	mock := &MockAuthController{ctrl: ctrl}
	mock.recorder = &MockAuthControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthController) EXPECT() *MockAuthControllerMockRecorder {
	return m.recorder
}

// LoginHandler mocks base method.
func (m *MockAuthController) LoginHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginHandler", w, r)
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockAuthControllerMockRecorder) LoginHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockAuthController)(nil).LoginHandler), w, r)
}

// SignUpHandler mocks base method.
func (m *MockAuthController) SignUpHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUpHandler", w, r)
}

// SignUpHandler indicates an expected call of SignUpHandler.
func (mr *MockAuthControllerMockRecorder) SignUpHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpHandler", reflect.TypeOf((*MockAuthController)(nil).SignUpHandler), w, r)
}
