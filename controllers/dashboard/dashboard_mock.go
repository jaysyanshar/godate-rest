// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/dashboard/dashboard.go

// Package dashboard is a generated GoMock package.
package dashboard

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDashboardController is a mock of DashboardController interface.
type MockDashboardController struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardControllerMockRecorder
}

// MockDashboardControllerMockRecorder is the mock recorder for MockDashboardController.
type MockDashboardControllerMockRecorder struct {
	mock *MockDashboardController
}

// NewMockDashboardController creates a new mock instance.
func NewMockDashboardController(ctrl *gomock.Controller) *MockDashboardController {
	mock := &MockDashboardController{ctrl: ctrl}
	mock.recorder = &MockDashboardControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardController) EXPECT() *MockDashboardControllerMockRecorder {
	return m.recorder
}

// HelloHandler mocks base method.
func (m *MockDashboardController) HelloHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HelloHandler", w, r)
}

// HelloHandler indicates an expected call of HelloHandler.
func (mr *MockDashboardControllerMockRecorder) HelloHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloHandler", reflect.TypeOf((*MockDashboardController)(nil).HelloHandler), w, r)
}
